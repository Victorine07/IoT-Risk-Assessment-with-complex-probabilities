### CORRECTNESS ANALYSIS: step-by-step reasoning

Algorithm 2: "OR" Misuse Impact (MI) Conditional Probability
    Input: Local Static MI_LS of attack sn : MI_LS(sn) = c; MI of Parent attacks of attack sn: MIpa
    Output: Conditional MI of sn resulting from an OR join-type of parent attacks MIpa 
    1. MI(sn) = MI_LS(sn)
    2. if MIpa is not empty:
    3.   UNION_spa = MIpa[0]
    4.   for i in (1, MIpa) do
    5.     INTERSECT_spa = UNION_spa * MIpa[i]
    6.     exclusion1 = UNION_spa − INTERSECT_spa
    7.     exclusion2 = MIpa[i] − INTERSECT_spa
    8.     UNION_spa = exclusion1 + INTERSECT_spa + exclusion2
    9.   end
   10. MI(sn) = MI(sn) * (MI(sn) + UNION_spa)
   11. return MI(sn )

CORRECTNESS DEFINITION:
    The algorithm should correctly compute the conditional impact of attack sn given that at least one of its parent attacks MIpa has 
    occurred, while also effectively managing the impact of cycles.

ALGORITHM 1: CORRECTNESS ANALYSIS
    INITIALIZATION (Lines 1-3):
        Line 1: MI(sn) = MI_LS(sn): correct initialization of the MI of sn with its local static impact. This sets the baseline for the node's impact.
        Line 3: UNION_spa = MIpa[0]: correct initialization of the UNION_spa with the impact of the first parent. This sets the initial combined impact.
        These set the initial values for the calculation of the cumulative parent impact.

    INCLUSION-EXCLUSION PRINCIPLE (Lines 4-9):
        The for loop iterates through the remaining parent impacts in MIpa and correctly implements the inclusion-exclusion principle to calculate the union of the parent impacts (MIpa).
          "UNION_spa" progressively stores the combined impact of the parent attacks of attack sn.
          "INTERSECT_spa" calculates the intersection of the current "UNION_spa" and the next parent impact.
          "exclusion1" and "exclusion2" calculate the exclusive parts of the impacts.
          "INTERSECT_spa", "exclusion1" and "exclusion2" accurately determine the non-overlapping portions of the impacts.
        This ensures that the combined impact of the parents is calculated correctly for an "OR" relationship, following the inclusion-exclusion principle.

    IMPACT COMPUTATION AND CYCLE HANDLING (Line 10):
        Line 10: MI(sn) = MI(sn) * (MI(sn) + UNION_spa): combines the node's local impact with the combined parent impact.
        Dynamic Behavior:
          When cycles occur, the MI(sn) values are recalculated with each cycle.
          The initialization of MI(sn)=MI_LS(sn) term acts as a dampening factor, preventing indefinite growth.
          The impact values converge to a stable state after a few cycles.
        Justification:
          The constant MI_LS(sn) acts as an anchor.
          The changing UNION_spa values drive the dynamic adjustment.
          The formula creates a feedback loop that leads to convergence.

    RETURN VALUE (Line 11):
        Line 11: return MI(sn): The algorithm returns the calculated conditional MI of sn.

    Edge Cases and Considerations:
        Empty MIpa: If MIpa is empty, Lines (2-10) are skipped, and the MI of sn remains MI_LS(sn), which is correct.
        Zero Values: If any impact value is zero, the calculations are handled correctly through the inclusion-exclusion principle.
        Real-World Context:
          The algorithm models the propagation of impact in an attack graph.
          The cycle-handling mechanism ensures that the impact values stabilize, reflecting the real-world behavior of attackers.



### COMPLEXITY ANALYSIS:

    Loop Complexity (Lines 4-9):
        The loop iterates n - 1 times, where n is the number of parent impacts in MIpa.
        Inside the loop, all operations are constant-time arithmetic operations.
        Therefore, the complexity of the loop is O(n).

    Line 9 Complexity:
        Line 9 involves constant-time arithmetic operations, so its complexity is O(1).

    Graph Complexity:
        BEST CASE SCENARIO -- No cycles:
            In a directed acyclic graph (DAG), the nodes are processed in topological order. 
            The algorithm also shows that each node is processed only once, and the probabilities of the parent nodes should be computed before the child nodes. 
            For each node, Algorithm 2 with O(n) runtime complexity is executed, with 'n': the number of parents for that node.
            Summing over all nodes, the sum of the number of parents for all nodes is equal to the number of edges (E). The runtime is O(V+E), equivalent to a single pass through the DAG.
                With each node and edge visited once, the total runtime is O(V+E), V: total number of nodes or vertices, and E: total number of edges in the DAG 
                
        WORST CASE SCENARIO -- Cyclic graph:
            With cycles, the graph cannot be processed in a single pass; the probabilities should iteratively be updated until they stabilize
            With the possibility of each node being revisited multiple times, the number of iterations for stabilizing cycles in a graph depends on the cycle length "c", and the number of cycles "k" in the graph


            BOUNDING THE COMPLEXITY:
                Let's consider a cycle containing c nodes and assume the probabilities for each node stabilize in O(c) iterations, then each node in the cycle is prcossed c times.
                Let's consider a total of k cycles in the graph
                => the computations for all the cycles are proportional to O(kc)

            EMPIRICAL OBSERVATION: Faster Convergence
                In practical IoT attack graphs, cycles are usually small. 
                Moreover, with the established formula (Line 10), the MI probability converges with less than 10 iterations. (Dr Sen, this is based on the backtracking example with 2 nodes, but if there are more nodes, we don't really know; should I run some tests?)
                => the computations for all the cycles are proportional to O(k*E), where E is a constant; thus proportional to O(k)

            The overall runtime when cycles arise is therefore: O(V+E+k), 
                V: number of nodes in the graph
                E: number of edges in the graph
                k: number of cycles in the graph



### KEY CONSIDERATIONS:

    Cycle Handling:
        The formula in line 10 is a custom formula to compute the impact of an attack sn, given the parent attacks.
        The formula in line 10 is the core mechanism for handling cycles. It ensures that the impact doesn't grow indefinitely.
        This handling of cycles does not change the Big O runtime complexity, but it does change the resulting values.
        


